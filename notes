
Working Notes
-------------
This file contains a diary of random working notes, which I use to keep
track of what the heck it is that I'm doing.  It is almost surely totally
useless to you, except maybe for some weird voyeuristic reasons.

======================================================================
Feb 2021
--------
Commisioning run for calibration (fake language)

Crash.
ulimit -c unlimited
ulimit -a

 (cog-rocks-stats)
Connected to rocks:///home/ubuntu/data/fake_pairs.rdb
Database contents:
Next aid: 633
Atoms/Links/Nodes a@: 633 l@: 586 n@: 46
Keys/Incoming/Hash k@: 338 i@: 336 h@: 0

Thread 172410 "guile" received signal SIGABRT, Aborted.
[Switching to Thread 0x7fff57fff700 (LWP 14341)]
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
50      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.

(gdb) bt
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007ffff7cbe859 in __GI_abort () at abort.c:79
#2  0x00007ffff7cbe729 in __assert_fail_base (
    fmt=0x7ffff7e54588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n",
    assertion=0x7ffff787262d "mutex->__data.__owner == 0",
    file=0x7ffff78725fa "../nptl/pthread_mutex_lock.c", line=117,
    function=<optimized out>) at assert.c:92
#3  0x00007ffff7ccff36 in __GI___assert_fail (
    assertion=assertion@entry=0x7ffff787262d "mutex->__data.__owner == 0",
    file=file@entry=0x7ffff78725fa "../nptl/pthread_mutex_lock.c",
    line=line@entry=117,
    function=function@entry=0x7ffff7872790 <__PRETTY_FUNCTION__.10174> "__pthread_mutex_lock") at assert.c:101
#4  0x00007ffff78661a9 in __GI___pthread_mutex_lock (mutex=<optimized out>)
    at ../nptl/pthread_mutex_lock.c:117
#5  0x00007fffececc047 in __gthread_mutex_lock (__mutex=0x5555559b1560)
    at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#6  __gthread_recursive_mutex_lock (__mutex=0x5555559b1560)
    at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:811
#7  std::recursive_mutex::lock (this=0x5555559b1560)
    at /usr/include/c++/9/mutex:106
#8  std::unique_lock<std::recursive_mutex>::lock (this=<synthetic pointer>,
    this=<synthetic pointer>) at /usr/include/c++/9/bits/unique_lock.h:141
#9  std::unique_lock<std::recursive_mutex>::unique_lock (__m=...,
    this=<synthetic pointer>) at /usr/include/c++/9/bits/unique_lock.h:71
#10 opencog::AtomTable::add (this=this@entry=0x5555559b1560, orig=...,
    force=force@entry=false)
    at /home/ubuntu/src/atomspace/opencog/atomspace/AtomTable.cc:216
#11 0x00007fffecec1b85 in opencog::AtomSpace::add_node (
    this=this@entry=0x5555559b1560, t=<optimized out>, t@entry=240, name=...)
    at /home/ubuntu/src/atomspace/opencog/atomspace/AtomSpace.cc:287
#12 0x00007fffeceff99b in opencog::SchemeSmob::ss_new_node (
    stype=<optimized out>, sname=<optimized out>, kv_pairs=0x304)
    at /home/ubuntu/src/atomspace/opencog/guile/SchemeSmobNew.cc:390


(gdb) print in
$4 = "(observe-text \" n j d s b o u g\")\n"


scheme@(guile-user)>
==7309== Thread 57:
==7309== Syscall param futex(futex) points to unaddressable byte(s)
==7309==    at 0x4FA2839: __pthread_mutex_unlock_usercnt (pthread_mutex_unlock.c:58)
==7309==    by 0x4FA2839: pthread_mutex_unlock (pthread_mutex_unlock.c:357)
==7309==    by 0x10FAC951: rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (in /usr/lib/librocksdb.so.5.17.2)
==7309==    by 0x10EFCCAC: rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (in /usr/lib/librocksdb.so.5.17.2)
==7309==    by 0x10EFE9AF: rocksdb::DBImpl::Write(rocksdb::WriteOptions const&, rocksdb::WriteBatch*) (in /usr/lib/librocksdb.so.5.17.2)
==7309==    by 0x10EFEC1B: rocksdb::DB::Delete(rocksdb::WriteOptions const&, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&) (in /usr/lib/librocksdb.so.5.1
7.2)
==7309==    by 0x10EFEC7F: rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&) (in /usr/lib/librocksdb.so.5.17.2)
==7309==    by 0x10E65771: rocksdb::DB::Delete(rocksdb::WriteOptions const&, rocksdb::Slice const&) (in /usr/lib/librocksdb.so.5.17.2)
==7309==    by 0x10BC6D97: opencog::RocksStorage::storeAtom(opencog::Handle const&, bool) (RocksIO.cc:254)
==7309==    by 0x10B5F908: opencog::PersistSCM::dflt_store_atom(opencog::Handle) (PersistSCM.cc:289)
==7309==    by 0x10B63459: conv_call_method<0> (SchemePrimitive.h:253)
==7309==    by 0x10B63459: cpp_invoke (SchemePrimitive.h:261)
==7309==    by 0x10B63459: opencog::SchemePrimitive<opencog::Handle, opencog::PersistSCM, opencog::Handle>::invoke(scm_unused_struct*) (SchemePrimitive.h:399)
==7309==    by 0x1011B8CD: opencog::PrimitiveEnviron::do_call(scm_unused_struct*, scm_unused_struct*) (SchemePrimitive.cc:172)
==7309==    by 0x2464E105: ???
==7309==  Address 0x29042bc0 is on thread 62's stack
==7309==  1384 bytes below stack pointer
==7309==


std::lock_guard<std::mutex> lck(_mtx);
removeSatom

maybe put a lock into storeAtom circa line 254???
